name: Terraform Create/Update - Deploy/Update Full Environment

on: [workflow_dispatch]

env:
  TF_VAR_GOOGLE_CLOUD_PROJECT_ID: ${{ secrets.GOOGLE_CLOUD_PROJECT }}
  TF_VAR_VM_ZONES: ${{ secrets.VM_ZONES }}
  TF_VAR_VM_NAME_PREFIX: ${{ secrets.VM_NAME_PREFIX }}
  TF_VAR_ORCHESTRATOR_VM_INSTALL_SH_FILE_PATH: "/../install_prerequisites-gc-orchestrator-vm.sh"
  TF_VAR_GPU_VM_INSTALL_SH_FILE_PATH: "/../install_prerequisites-gc-gpu-vm.sh"
  TF_VAR_DOMAIN_NAME: ${{ secrets.DOMAIN_NAME }}
  TF_VAR_ACME_OWNER_EMAIL: ${{ secrets.ACME_OWNER_EMAIL }}
  TF_VAR_ORCHESTRATOR_CONTAINER_NAME: ${{ secrets.ORCHESTRATOR_CONTAINER_NAME }}
  TF_VAR_PIXEL_STREAMING_UNREAL_CONTAINER_IMAGE_NAME: ${{ secrets.PIXEL_STREAMING_UNREAL_CONTAINER_IMAGE_NAME }}
  TF_VAR_GPU_INSTANCES_PER_ZONE: ${{ secrets.GPU_INSTANCES_PER_ZONE }}
  TF_VAR_MAX_USER_SESSION_PER_INSTANCE: ${{ secrets.MAX_USER_SESSION_PER_INSTANCE }}
  TF_VAR_GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
  TF_VAR_FILE_API_BUCKET_NAME: ${{ secrets.FILE_API_BUCKET_NAME }}
  TF_VAR_CLOUD_API_SECRET_KEYS: ${{ secrets.CLOUD_API_SECRET_KEYS }}
  GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}

jobs:
  terraform-create:
    name: Terraform Create
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: recursive
        fetch-depth: 2 # Essential for git diff --name-only @~..@ in Build and Deploy Dotnet Application step

    # Setup gcloud CLI
    - uses: google-github-actions/setup-gcloud@v0
      with:
        service_account_email: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}
        service_account_key: ${{ secrets.GOOGLE_CREDENTIALS }}
        export_default_credentials: true

    # Setup dotnet env. (Used in Terraform for build)
    - uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '3.1.x'

    # Setup terraform env.
    - name: HashiCorp - Setup Terraform
      uses: hashicorp/setup-terraform@v2.0.0
      with:
        terraform_version: 1.1.7

    # Build Dotnet Application and Deploy
    # First check if there is any change done to orchestrator-service or submodules
    - name: Build and Deploy Dotnet Application
      working-directory: orchestrator-service/services/ServicePixelStreamingOrchestrator
      id: build-deploy-dotnet-app
      run: |
        if [[ $(git rev-list --all --count) != 1 ]]; then bFound=false && for line in $(git diff --name-only @~..@); do if [[ $line == orchestrator-service/* ]] || [[ $line == submodules/* ]]; then bFound=true; fi; done; if ! $bFound; then echo "No change done to Dotnet app. Skipping build and deploy..." && exit 0; fi; fi;

        mkdir -p output/app/out
        dotnet restore ServicePixelStreamingOrchestrator.csproj
        dotnet publish ServicePixelStreamingOrchestrator.csproj --runtime alpine-x64 --configuration Release --self-contained true -p:PublishSingleFile=true -p:PublishTrimmed=true -o output/app/out
        
        cp Dockerfile output
        cp -r Views output/public

        cd output
        
        gcloud builds submit --project=${{ secrets.GOOGLE_CLOUD_PROJECT }} --tag=gcr.io/${{ secrets.GOOGLE_CLOUD_PROJECT }}/${{ secrets.ORCHESTRATOR_CONTAINER_NAME }}:latest

    - name: Terraform Init
      working-directory: terraform
      id: init
      run: terraform init -backend-config="bucket=${{ secrets.TERRAFORM_STATE_BUCKET }}" -backend-config="prefix=terraform/state-${{ secrets.VM_NAME_PREFIX }}"

    - name: Terraform Validate
      working-directory: terraform
      id: validate
      run: terraform validate -no-color

    - name: Terraform Plan
      working-directory: terraform
      id: plan
      run: terraform plan -input=false

    - name: Terraform Apply
      working-directory: terraform
      id: apply
      run: terraform apply -auto-approve -input=false